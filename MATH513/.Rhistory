# import
library(readr)
<<<<<<< Updated upstream
data <- read_csv('Session-4/Module_Marks_Invented_Example.csv')
View(data)
view(data)
View(data)
data
names(data)
library(tidyr)
install.packages('tidyr')
library(tidyr)
View(data)
View(data)
View(data)
# place all the marks in one column named 'marks', with
#   another column named 'source' indicating the source of the
#   marks
marks_long <- gather(data, 'Marks', 'Source', 1:9)
marks_long
# place all the marks in one column named 'marks', with
#   another column named 'source' indicating the source of the
#   marks
marks_long <- gather(data, 'Marks', 'Source', 1:5)
marks_long
# place all the marks in one column named 'marks', with
#   another column named 'source' indicating the source of the
#   marks
marks_long <- gather(data, 'Marks', 'Source')
marks_long
# place all the marks in one column named 'marks', with
#   another column named 'source' indicating the source of the
#   marks
marks_long <- gather(data, 'source', 'marks')
marks_long
# separate the 'source' column of 'marks_long' into two columns
#   named 'module' and 'component'
marks_long_2 <- marks_long %>%
separate(c('module', 'component'))
# separate the 'source' column of 'marks_long' into two columns
#   named 'module' and 'component'
marks_long_2 <- marks_long %>%
separate(c(source, 'module', 'component'))
# separate the 'source' column of 'marks_long' into two columns
#   named 'module' and 'component'
marks_long_2 <- marks_long %>%
separate(source, c('module', 'component'))
View(marks_long_2)
marks_long_2
# separate the 'source' column of 'marks_long' into two columns
#   named 'module' and 'component'
marks_long_2 <- marks_long %>%
separate(source, c('module', 'component'), '\\.')
marks_long_2
# define 'component' as a factor, called 'component_f', with
#   levels 'C', 'E', and 'F' with labels 'Coursework',
#   'Examination', and 'Overall'
marks_long_3 <- marks_long_2 %>%
mutate(component_f = factor(component, levels=c('C', 'E', 'F'),
labels=c('Coursework', 'Examination',
'Overall')))
head(marks_long_3$component_f)
View(marks_long_3)
View(marks_long_3)
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=mark)) +
geom_boxplot()
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks)) +
geom_boxplot()
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks)) +
geom_boxplot() +
labs(x = 'Component',
y = 'Mark (%)')
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks)) +
geom_boxplot() +
facet_grid(module ~ .) +
labs(x = 'Component',
y = 'Mark (%)')
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks)) +
geom_boxplot() +
facet_grid(. ~ module) +
labs(x = 'Component',
y = 'Mark (%)')
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks)) +
geom_boxplot() +
facet_grid(. ~ module) +
labs(x = 'Component',
y = 'Mark (%)') +
theme(axis.text.x = element_text(size=14, angle=90, vjust=0.5,
hjust=1))
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks)) +
geom_boxplot() +
scale_fill_manual() +
facet_grid(. ~ module) +
labs(x = 'Component',
y = 'Mark (%)') +
theme(axis.text.x = element_text(size=14, angle=90, vjust=0.5,
hjust=1))
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
facet_grid(. ~ module) +
labs(x = 'Component',
y = 'Mark (%)') +
theme(axis.text.x = element_text(size=14, angle=90, vjust=0.5,
hjust=1))
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks, fill=component_f)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
facet_grid(. ~ module) +
labs(x = 'Component',
y = 'Mark (%)') +
theme(axis.text.x = element_text(size=14, angle=90, vjust=0.5,
hjust=1))
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks, fill=component_f)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
facet_grid(. ~ module) +
labs(x = 'Component',
y = 'Mark (%)') +
theme(axis.text.x = element_text(size=14, angle=90, vjust=0.5,
hjust=1),
legend.position = 'none')
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks, fill=component_f)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
scale_y_continuous(limits = c(30,100))
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks, fill=component_f)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
scale_y_continuous(limits = c(40,100))
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks, fill=component_f)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
scale_y_continuous(breaks = waiver(), limits = c(30,100))
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks, fill=component_f)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
scale_y_continuous(limits = c(30,100))
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks, fill=component_f)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
scale_y_continuous(breaks = c(30,40,50,60,70,100),
limits = c(30,100))
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks, fill=component_f)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
scale_y_continuous(breaks = c(30,40,50,60,70,100),
minor_breaks = c(30,40,50,60,70,80,90,100),
limits = c(30,100))
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks, fill=component_f)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
scale_y_continuous(breaks = c(30,40,50,60,70,100),
minor_breaks = c(30,40,50,60,70,80,90,100),
limits = c(30,100)) +
facet_grid(. ~ module) +
labs(x = 'Component',
y = 'Mark (%)') +
theme(axis.text.x = element_text(size=14, angle=90, vjust=0.5,
hjust=1),
legend.position = 'none')
# produce a boxplot
ggplot(marks_long_3, aes(x=component_f, y=marks, fill=component_f)) +
geom_boxplot() +
scale_fill_manual(values = c('orange', 'yellow', 'magenta')) +
scale_y_continuous(breaks = c(30,40,50,60,70,100),
minor_breaks = c(30,40,50,60,70,80,90,100),
limits = c(30,100)) +
facet_grid(. ~ module) +
labs(x = 'Component',
y = 'Mark (%)') +
theme(axis.text.x = element_text(size=14, angle=90, vjust=0.5,
hjust=1),
legend.position = 'none')
=======
library(dplyr)
library(ggplot2)
data <- read_csv('Session-2/MATH513_Questionnaire_Data.csv')
head(data)
# show the height, age, sex, and sports habits of students
#   who eat meat, drink coffee, and like beer
filtered_data <- data %>%
filter(EatMeat == 'Yes', DrinkCoffee == 'Yes', LikeBeer == 'Yes')
dplyr::select(data, Height, Age, Sex, Sports)
# show summary statistics about interviewed students, such as
#   average and minimum sleep time, and the median and maximum
#   rent. split the results by students who are happy/not happy
#   with their accommodation and those who feel/don't feel safe.
#   also, show the number of students in each category
data_by_happiness <- data %>%
group_by(Happy_accommodation, Safe)
View(data_by_happiness)
summarise(data_by_happiness, avg_sleep=mean(Sleep),
min_sleep=min(Sleep), med_rent=median(Rent),
max_rent=max(Rent), student_count=n())
# consider the whole dataset, how many females and how many
#   males are there?
count(data, vars=Sex)
# create a boxplot of age stratified by sex
ggplot(data, aes(x=Sex, y=Age, fill=Sex)) +
geom_boxplot(varwidth=T) +
labs(x='') +
theme(legend.position='none')
# use dplyr to work out the minimum age for each gender
min_age_by_sex <- data %>%
group_by(Sex) %>%
summarise(min_age = min(Age))
View(min_age_by_sex)
View(min_age_by_sex)
# now extract the minimum age for males
min_age_male <- min_age_by_sex %>%
filter(Sex == 'Male') %>%
select(min_age) %>%
as.numeric()
# we can omit the data corresponding to the person with the
#   anomalous age value
data_omitted <- data %>%
filter(Age >= 17)
data_omitted$Age
# produce a boxplot of age, stratified by sex, using the
#   omitted data
ggplot(data_omitted, aes(x=Sex, y=Age, fill=Sex)) +
geom_boxplot(varwidth=T) +
labs(x='') +
theme(legend.position='none')
# alternatively, we can replace the anomalous age value with
#   the median value for age of males
# work out the median age of males, providing a numerical result
med_age_male <- data %>%
group_by(Sex) %>%
summarise(median_age = median(Age)) %>%
filter(Sex == 'Male') %>%
select(median_age) %>%
as.numeric()
# alternatively, we can replace the anomalous age value with
#   the median value for age of males
# work out the median age of males, providing a numerical result
med_age_male <- data_omitted %>%
group_by(Sex) %>%
summarise(median_age = median(Age)) %>%
filter(Sex == 'Male') %>%
select(median_age) %>%
as.numeric()
# now replace the anomalous age value with this median value
data_corrected <- data %>%
mutate(age_corrected = ifelse(Age = min_age_male,
med_age_male, Age))
qd_corrected <- data%>%mutate(Age_corrected =ifelse(Age==min_Male, median_Male, Age))
# now replace the anomalous age value with this median value
data_corrected <- data %>%
mutate(age_corrected = ifelse(Age == min_age_male,
med_age_male, Age))
View(data_corrected)
# check that the minimum age for males is no longer anomalous
data_corrected %>%
group_by(Sex) %>%
summarise(min_age_male = min(age_corrected))
# produce a boxplot of age, stratified by sex, using the corrected
#   data
ggplot(data_corrected, aes(x=Sex, y=Age, fill=Sex)) +
geom_boxplot(varwidth=T) +
labs(x='') +
theme(legend.position='none')
# produce a boxplot of age, stratified by sex, using the corrected
#   data
ggplot(data_corrected, aes(x=Sex, y=Age, fill=Sex)) +
geom_boxplot(varwidth=T) +
labs(x='') +
theme(legend.position='none')
View(data_corrected)
# produce a boxplot of age, stratified by sex, using the corrected
#   data
ggplot(data_corrected, aes(x=Sex, y=age_corected, fill=Sex)) +
geom_boxplot(varwidth=T) +
labs(x='') +
theme(legend.position='none')
# produce a boxplot of age, stratified by sex, using the corrected
#   data
ggplot(data_corrected, aes(x=Sex, y=age_corrected, fill=Sex)) +
geom_boxplot(varwidth=T) +
labs(x='') +
theme(legend.position='none')
# compare the means, medians, standard deviations, and interquartile
#   ranges og age across genders
data_corrected %>%
group_by(Sex) %>%
summarise(mean_age = mean(age_corrected),
median_age = median(age_corrected),
std_dev_age = sd(age_corrected),
iqr_age = IQR(age_corrected))
>>>>>>> Stashed changes
