2 + 2 # basic math
1:100 # prints numbers 1 to 100 across several lines
print('Hello World!') # prints 'Hello World' to the console
a <- 1 # use <- and not =
2 -> b # can go the other way, but this is bad practice
c <- d <- e <- 3 # multiple assignments
# multiple values
x <- c(1, 2, 5, 9) # c = combine/concatenate
x # prints the contents of x to the console
# create sequential data
0:10 # 0 through 10
10:0 # 10 through 0
seq(10) # 1 to 10
seq(30, 0, by=-3) # count down from 30 by 3
# surround command with parenthesis to also print
(y <- c(5, 1, 0, 10))
x + y # adds corresponding elements in x and y
# surround command with parenthesis to also print
(y <- c(5, 1, 0, 10))
x + y # adds corresponding elements in x and y
x * 2 # multiplies each element in x by 2
2 ^ 6 # powers/exponents
sqrt(64) # square root
log(100) # natural log: base e (2.71828...)
log10(100) # base 10 log
# clear environment
rm(list - ls())
# clear environment
rm(list = ls())
# numeric
n1 <- 15 # double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
# character
c1 <- "c"
c1
typeof(c1)
c2 <- "a string of text"
c2
typeof(c2)
# logical
l1 <- TRUE
l1
typeof(l1)
l2 <- F
l2
typeof(l2)
v1 <- c(1, 2, 3, 4, 5)
v1
is.vector(v1)
v2 <- c("a", "b", "c")
v2
is.vector(v2)
v3 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
v3
is.vector(v3)
m1 <- matrix(c(T, T, F, F, T, F), nrow=2)
m1
m2 <- matrix(c("a", "b",
"c", "d"),
nrow=2,
byrow=T)
m2
# give data, then dimensions (rows, columns, tables)
a1 <- array(c(1:24), c(4, 3, 2))
a1
# can combine vectors of the same length
vNumeric <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical <- c(T, F, T)
df1 <- cbind(vNumeric, vCharacter, vLogical)
df1 # coerces all values to most basic data type
df2 <- as.data.frame(cbind(vNumeric, vCharacter, vLogical))
df2 # makes a data frame with three different data types
o1 <- c(1, 2, 3)
o2 <- c("a", "b", "c", "d")
o3 <- c(T, F, T, T, F)
list1 <- list(o1, o2, o3)
list1
list2 <- list(o1, o2, o3, list1) # lists within lists
list2
# goes to 'least restrictive' data type
(coerce1 <- c(1, "b", TRUE))
typeof(coerce1)
(coerce2 <- 5)
typeof(coerce2)
(coerce3 <- as.integer(5))
typeof(coerce3)
(coerce4 <- c("1", "2", "3"))
typeof(coerce4)
(coerce5 <- as.numeric(c("1", "2", "3")))
typeof(coerce5)
(coerce6 <- matrix(1:9, nrow=3))
is.matrix(coerce6)
(coerce7 <- as.data.frame(matrix(1:9, nrow=3)))
is.data.frame(coerce7)
rm(list = ls())
# load base packages manually
library(datasets) # for example, datasets
?iris
df <- iris
head(df)
# use comments to disable commands
hist(df$Sepal.Width,
# col = "#CD0000", # red3
# border = NA, # no borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# use comments to disable commands
hist(df$Sepal.Width,
col = "#CD0000", # red3
# border = NA, # no borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# use comments to disable commands
hist(df$Sepal.Width,
col = "#CD0000", # red3
border = NA, # no borders
main = "Histogram of Sepal Width",
xlab = "Sepal Width (in cm)")
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# install pacman ('package manager') if needed
if (!require("pacman")) install.packages("pacman")
# load contributed packages with pacman
pacman::p_load(pacman, party, psych, rio, tidyverse)
# load base packages manually
library(datasets) # for example datasets
# install pacman ('package manager') if needed
if (!require("pacman")) install.packages("pacman")
# install pacman ('package manager') if needed
if (!require("pacman")) install.packages("pacman")
# load contributed packages with pacman
pacman::p_load(pacman, party, psych, rio, tidyverse)
# import csv files with readr::read_csv() from tidyverse
(df <- read_csv("data/StateData.csv"))
# import other formats with rio::import() from rio
(df <- import("data/StateData.xlsx") %>% as_tibble())
# or...
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
rename(y = psychRegions) %>%
print()
# decision tree using party::ctree
# df[, -1] excludes the state_code
fit <- ctree(y ~ ., data =df[, -1]) # create tree
fit %>% plot() # plot tree
fit %>% # predicted vs true
predict() %>%
table(df$y)
hc <- df %>% # get data
dist %>% # compute distance/dissimilarity matrix
hclust %>% # compute hierarchial clusters
plot(labels = df%state_code) # plot dendrogram
hc <- df %>% # get data
dist %>% # compute distance/dissimilarity matrix
hclust %>% # compute hierarchial clusters
plot(labels = df%state_code) # plot dendrogram
hc <- df %>% # get data
dist %>% # compute distance/dissimilarity matrix
hclust %>% # compute hierarchial clusters
plot(labels = df$state_code) # plot dendrogram
# clear environment
rm(list = ls())
# clear packages
p_unload(all) # remove all add-ons
detach("package:datasets", unload=TRUE) # for base
# clear plots
dev.off() # but only if there IS a plot
# clear console
cat("\014") # ctrl + l
# load base package manually
library(datasets) # for example datasets
?datasets
library(help="datasets")
# iris data
?iris
iris
# UCBAdmissions
?UCBAdmissions
UCBAdmissions
# Titanic
?Titanic
Titanic
# state.x77
?state.x77
state.x77
# swiss
?swiss
swiss
# clear environment
rm(list = ls())
# clear packages
p_unload(all) # remove all add-ons
detach("package:datasets", unload=TRUE) # for base
# clear plots
dev.off() # but only if there IS a plot
# clear console
cat("\014") # ctrl + l
# install pacman ('package manager') if needed
if (!require("pacman")) install.packages("pacman")
# load contributed packages with pacman
pacman::p_load(pacman, party, rio, tidyverse)
# import csv files with readr::read_Csv() from tidyverse
(df <- read_csv("data/StateData.csv"))
# import other formats with rio::import() from rio
(df <- import("data/StateData.xlsx") %>% as_tibble())
View(df)
# or...
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance)%>%
mutate(psychRegions = as.factor(psychRegions)) %>%
rename(y = psychRegions) %>%
print()
# decision tree using party::ctree
# df[. -1] excludes the state_code
fit <- ctree(y ~ ., data=df[,-1]) # create tree
fit %>% plot() # plot tree
fit %>% # predicted vs true
predict() %>%
table(df$y)
hc <- df %>% # get data
dist %>% # compute distance/dissimilarity matrix
hclust %>% # compute hierarchial clusters
plot(labels = df$state_code) # plot dendrogram
# clear environment
rm(list = ls())
# clear packages
p_unload(all) # remove all add-ons
detach("package:datasets", unload=TRUE) # for base
# clear plots
dev.off() # but only if there IS a plot
# clear console
cat("\014") # ctrl + l
